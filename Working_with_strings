____________________________________________________________________________________________________________________________________________________________________-
PART 1
______________________________________________________________________________________________________________________________________________________________________
In JavaScript, strings, despite being primitives, have methods associated with them. These methods are automatically available when you call them on a string primitive. This process is known as "boxing," where the string is temporarily converted into a string object, allowing methods to be applied. After the operation, the result is converted back to a regular string primitive.

```javascript
// Using string methods on a string primitive
const airline = 'TAP Air Portugal';

// IndexOf and lastIndexOf
console.log(airline.indexOf('r')); // 6
console.log(airline.lastIndexOf('r')); // 10

// Searching for entire words
console.log(airline.indexOf('Portugal')); // 8
console.log(airline.indexOf('portugal')); // -1 (case-sensitive)

// Extracting part of a string with slice
console.log(airline.slice(4)); // "Air Portugal"
console.log(airline.slice(4, 7)); // "Air"

// Dynamic extraction using indexOf and lastIndexOf
console.log(airline.slice(airline.indexOf(' ') + 1));
console.log(airline.slice(0, airline.lastIndexOf(' ')));

// Extracting from the end using negative indices
console.log(airline.slice(-2)); // "al"
console.log(airline.slice(1, -1)); // "AP Air Portuga"

// Function to check if a seat is a middle seat
const checkMiddleSeat = function (seat) {
  const s = seat.slice(-1);
  if (s === 'B' || s === 'E') {
    console.log('You got the middle seat! ðŸ˜¢');
  } else {
    console.log('You got lucky! ðŸ˜Ž');
  }
};

// Testing the function
checkMiddleSeat('23C'); // You got the middle seat! ðŸ˜¢
checkMiddleSeat('3E'); // You got the middle seat! ðŸ˜¢
checkMiddleSeat('7B'); // You got lucky! ðŸ˜Ž
```
n the example, various string methods such as `indexOf`, `lastIndexOf`, and `slice` are used to manipulate and extract information from a string. The `checkMiddleSeat` function demonstrates dynamic extraction of the last character and checks if it corresponds to a middle seat.

____________________________________________________________________________________________________________________________________________________________________-
PART 2
______________________________________________________________________________________________________________________________________________________________________

In this part of the tutorial, we covered various string methods in JavaScript:

1. **toLowerCase() and toUpperCase():** These methods change the case of a string. For example:
   ```javascript
   const text = 'Hello World';
   console.log(text.toLowerCase()); // Outputs: hello world
   console.log(text.toUpperCase()); // Outputs: HELLO WORLD
   ```

2. **Fixing Capitalization in a Name:**
   ```javascript
   const passenger = 'jOnAs';
   const passengerLower = passenger.toLowerCase();
   const passengerCorrect =
     passengerLower[0].toUpperCase() + passengerLower.slice(1);
   console.log(passengerCorrect); // Outputs: Jonas
   ```

3. **Checking User Input Email:**
   ```javascript
   const loginEmail = '  HeLLo@jONas.iO\n ';
   const normalizedEmail = loginEmail.toLowerCase().trim();
   console.log(normalizedEmail); // Outputs: hello@jonas.io
   ```

4. **Replacing Parts of Strings:**
   ```javascript
   let priceGreatBritain = '288,97 pounds';
   let priceUS = priceGreatBritain.replace('pound', '$').replace(',', '.');
   console.log(priceUS); // Outputs: 288.97 $

   const announcement = 'All passengers come to boarding door 23!';
   const correctedAnnouncement = announcement.replace(/door/g, 'gate');
   console.log(correctedAnnouncement); // Outputs: All passengers come to boarding gate 23!
   ```

5. **Boolean Methods (includes, startsWith, endsWith):**
   ```javascript
   const airplane = 'A320neo';
   console.log(airplane.includes('A320')); // Outputs: true
   console.log(airplane.startsWith('Air')); // Outputs: false
   console.log(airplane.endsWith('neo')); // Outputs: true
   ```

6. **Checking Baggage for Boarding:**
   ```javascript
   const checkBaggage = function (items) {
     const baggage = items.toLowerCase();
     if (baggage.includes('knife') || baggage.includes('gun')) {
       console.log('You are not allowed on board.');
     } else {
       console.log('Welcome aboard!');
     }
   };

   checkBaggage('I have a laptop, some food, and a pocket knife.');
   checkBaggage('I have some socks and a camera.');
   checkBaggage('Got some snacks and a gun for protection.');
   ```

Always remember to normalize input data, especially strings, to avoid case sensitivity issues and ensure consistency. The `toLowerCase()` method is often used for this purpose. Additionally, string methods like `includes`, `startsWith`, `endsWith`, and `replace` are powerful tools for working with and manipulating strings.

______________________________________________________________________________________________________________________________________
PART 3
_________________________________________________________________________________________________________________________________________

Absolutely! Let's dive into a more detailed explanation of some of the string methods you've covered, with additional examples.

### 1. **`split` Method:**
The `split` method is used to divide a string into an array of substrings based on a specified delimiter.

#### Example:
```javascript
const sentence = "A+very+nice+string";
const wordsArray = sentence.split("+");

console.log(wordsArray);
// Output: ["A", "very", "nice", "string"]
```

Here, the string `sentence` is split into an array using the `+` as a delimiter.

### 2. **`join` Method:**
The `join` method is the reverse of `split`. It joins the elements of an array into a single string, using a specified separator.

#### Example:
```javascript
const words = ["Mr.", "John", "Doe"];
const fullName = words.join(" ");

console.log(fullName);
// Output: "Mr. John Doe"
```

Here, the array `words` is joined into a string with a space as the separator.

### 3. **Destructuring Assignment with `split`:**
Destructuring assignment can be combined with `split` to directly extract values from the split array.

#### Example:
```javascript
const fullName = "John Doe";
const [firstName, lastName] = fullName.split(" ");

console.log(firstName); // Output: "John"
console.log(lastName);  // Output: "Doe"
```

The `split` method is used to separate the first name and last name, and destructuring assignment assigns them to variables.

### 4. **`padStart` and `padEnd` Methods:**
These methods are used for padding a string with a specified character until it reaches a certain length.

#### Example:
```javascript
const message = "Go to gate 23";
const paddedMessageStart = message.padStart(25, "+");
const paddedMessageEnd = message.padEnd(25, "+");

console.log(paddedMessageStart);
// Output: "+++++++++++Go to gate 23"

console.log(paddedMessageEnd);
// Output: "Go to gate 23+++++++++++"
```

Here, `padStart` adds `+` characters to the start of the message, and `padEnd` adds them to the end.

### 5. **`repeat` Method:**
The `repeat` method repeats a string a specified number of times.

#### Example:
```javascript
const weatherMessage = "Bad weather, all departures delayed. ";
const repeatedMessage = weatherMessage.repeat(3);

console.log(repeatedMessage);
// Output: "Bad weather, all departures delayed. Bad weather, all departures delayed. Bad weather, all departures delayed. "
```

Here, the weather message is repeated three times.

These examples provide a more in-depth understanding of how these string methods work. If you have specific questions about any of these examples or want more clarification on a particular topic, feel free to ask!
