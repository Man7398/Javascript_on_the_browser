1) Global Context:

When not inside a function, "this" means the global object. In a web browser, this is usually the window object.
Example:
console.log(this); // refers to the global object (e.g., window in a browser)
________________________________________________________________________________________________________________________
2) Function Context:

When inside a function, the value of "this" depends on how the function is used. For regular functions (not arrow functions), 
"this" is decided by the way the function is called. If the function is a method of an object, "this" refers to the object the method was called on. 
If the function is an independent function (not a method), "this" refers to the global object (or undefined in strict mode).

const obj = {
  name: 'MyObject',
  logName: function() {
    console.log(this.name);
  }
};

obj.logName(); // this refers to the obj object

const standaloneFunction = obj.logName;
standaloneFunction(); // this refers to the global object (or undefined in strict mode)

_____________________________________________________________________________________________________________________________________
3) Arrow Functions:

Arrow functions do not have their own "this"; they inherit the "this" value from the enclosing scope. This behavior makes arrow functions particularly useful in callback functions or situations where you want to maintain the value of "this" from the surrounding context.
Example:
const obj = {
  name: 'MyObject',
  logName: function() {
    setTimeout(() => {
      console.log(this.name);
    }, 1000);
  }
};

obj.logName(); // this refers to the obj object even inside the arrow function
___________________________________________________________________________________________________________________________
4) Event Handlers:

In event handlers (e.g., click handlers), "this" refers to the DOM element that triggered the event.
Example:
const button = document.getElementById('myButton');
button.addEventListener('click', function() {
  console.log(this); // this refers to the button element
});
_____________________________________________________________________________________________________________________________
5) Constructor Functions:

In a constructor function (used with the new keyword), "this" refers to the newly created object.
Understanding the rules governing the "this" keyword is essential for writing effective and bug-free JavaScript code. 
Always consider the context in which a function is called to determine the value of "this."

function Person(name) {
  this.name = name;
}

const person1 = new Person('John');
console.log(person1.name); // 'John'
